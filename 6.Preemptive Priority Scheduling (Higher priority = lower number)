/* preemptive_priority.c
   Compile: gcc preemptive_priority.c -o preemptive_priority
*/
#include <stdio.h>
#include <limits.h>

typedef struct {
    int pid, at, bt, rt, pr, ct, wt, tat, done;
} Proc;

int main() {
    int n; printf("Number of processes: "); scanf("%d",&n);
    Proc p[n];
    for(int i=0;i<n;i++){
        p[i].pid=i+1;
        printf("P%d arrival time burst time priority: ", i+1);
        scanf("%d %d %d",&p[i].at,&p[i].bt,&p[i].pr);
        p[i].rt=p[i].bt; p[i].done=0;
    }
    int t=0, completed=0;
    while(completed < n){
        int idx=-1;
        int bestPr = INT_MAX;
        for(int i=0;i<n;i++){
            if(!p[i].done && p[i].at <= t){
                if(p[i].pr < bestPr || (p[i].pr==bestPr && p[i].at < p[idx].at)){
                    bestPr = p[i].pr; idx=i;
                }
            }
        }
        if(idx==-1){ t++; continue; }
        // execute one unit (preemptive)
        p[idx].rt--; t++;
        if(p[idx].rt==0){
            p[idx].done=1; completed++;
            p[idx].ct = t;
            p[idx].tat = p[idx].ct - p[idx].at;
            p[idx].wt = p[idx].tat - p[idx].bt;
        }
    }
    printf("PID AT BT PR CT TAT WT\n");
    for(int i=0;i<n;i++) printf("%3d %2d %2d %2d %3d %3d %3d\n",
        p[i].pid,p[i].at,p[i].bt,p[i].pr,p[i].ct,p[i].tat,p[i].wt);
    return 0;
}

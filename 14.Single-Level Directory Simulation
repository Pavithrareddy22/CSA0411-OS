/* single_level_dir.c
   Simulate a single-level directory.
   Compile: gcc single_level_dir.c -o single_level_dir
*/
#include <stdio.h>
#include <string.h>

#define MAX_FILES 100
char files[MAX_FILES][64];
int file_count = 0;

void createFile(char *name) {
    if (file_count == MAX_FILES) {
        printf("Directory full!\n");
        return;
    }
    for (int i = 0; i < file_count; i++) {
        if (strcmp(files[i], name) == 0) {
            printf("File already exists!\n");
            return;
        }
    }
    strcpy(files[file_count++], name);
    printf("File '%s' created.\n", name);
}

void deleteFile(char *name) {
    for (int i = 0; i < file_count; i++) {
        if (strcmp(files[i], name) == 0) {
            for (int j = i; j < file_count - 1; j++)
                strcpy(files[j], files[j + 1]);
            file_count--;
            printf("File '%s' deleted.\n", name);
            return;
        }
    }
    printf("File not found!\n");
}

void listFiles() {
    printf("Files in directory:\n");
    for (int i = 0; i < file_count; i++)
        printf(" %s\n", files[i]);
    if (file_count == 0)
        printf(" <empty>\n");
}

int main() {
    int choice;
    char name[64];

    while (1) {
        printf("\n1. Create file\n2. Delete file\n3. List files\n4. Exit\nChoice: ");
        scanf("%d", &choice);
        switch (choice) {
        case 1:
            printf("Enter file name: ");
            scanf("%s", name);
            createFile(name);
            break;
        case 2:
            printf("Enter file name: ");
            scanf("%s", name);
            deleteFile(name);
            break;
        case 3:
            listFiles();
            break;
        case 4:
            return 0;
        default:
            printf("Invalid choice!\n");
        }
    }
}

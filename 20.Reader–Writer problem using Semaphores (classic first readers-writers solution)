// reader_writer.c
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

int readcount = 0;
sem_t mutex; // protect readcount
sem_t wrt;   // writers get exclusive access
int shared_data = 0;

void *reader(void *arg) {
    int id = *(int*)arg;
    for (int i=0;i<5;i++) {
        sem_wait(&mutex);
        readcount++;
        if (readcount == 1) sem_wait(&wrt);
        sem_post(&mutex);

        // reading
        printf("Reader %d reads value = %d\n", id, shared_data);
        usleep(150000);

        sem_wait(&mutex);
        readcount--;
        if (readcount == 0) sem_post(&wrt);
        sem_post(&mutex);
        usleep(150000);
    }
    return NULL;
}

void *writer(void *arg) {
    int id = *(int*)arg;
    for (int i=0;i<5;i++) {
        sem_wait(&wrt);
        shared_data += 1;
        printf("Writer %d wrote value = %d\n", id, shared_data);
        sem_post(&wrt);
        usleep(300000);
    }
    return NULL;
}

int main() {
    pthread_t r[3], w[2];
    int rids[3] = {1,2,3}, wids[2] = {1,2};
    sem_init(&mutex, 0, 1);
    sem_init(&wrt, 0, 1);

    for (int i=0;i<3;i++) pthread_create(&r[i], NULL, reader, &rids[i]);
    for (int i=0;i<2;i++) pthread_create(&w[i], NULL, writer, &wids[i]);

    for (int i=0;i<3;i++) pthread_join(r[i], NULL);
    for (int i=0;i<2;i++) pthread_join(w[i], NULL);

    sem_destroy(&mutex); sem_destroy(&wrt);
    return 0;
}

// producer_consumer.c
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFSIZE 5
int buffer[BUFSIZE];
int in = 0, out = 0;

sem_t emptySlots, fullSlots;
pthread_mutex_t mutex;

void *producer(void *arg) {
    int id = *(int*)arg;
    for (int i=0;i<10;i++) {
        int item = id*100 + i;
        sem_wait(&emptySlots);
        pthread_mutex_lock(&mutex);
        buffer[in] = item;
        printf("Producer %d produced %d at %d\n", id, item, in);
        in = (in+1)%BUFSIZE;
        pthread_mutex_unlock(&mutex);
        sem_post(&fullSlots);
        usleep(100000);
    }
    return NULL;
}

void *consumer(void *arg) {
    int id = *(int*)arg;
    for (int i=0;i<10;i++) {
        sem_wait(&fullSlots);
        pthread_mutex_lock(&mutex);
        int item = buffer[out];
        printf("Consumer %d consumed %d from %d\n", id, item, out);
        out = (out+1)%BUFSIZE;
        pthread_mutex_unlock(&mutex);
        sem_post(&emptySlots);
        usleep(150000);
    }
    return NULL;
}

int main() {
    pthread_t p1, p2, c1, c2;
    int id1=1, id2=2;
    sem_init(&emptySlots, 0, BUFSIZE);
    sem_init(&fullSlots, 0, 0);
    pthread_mutex_init(&mutex, NULL);

    pthread_create(&p1, NULL, producer, &id1);
    pthread_create(&p2, NULL, producer, &id2);
    pthread_create(&c1, NULL, consumer, &id1);
    pthread_create(&c2, NULL, consumer, &id2);

    pthread_join(p1,NULL); pthread_join(p2,NULL);
    pthread_join(c1,NULL); pthread_join(c2,NULL);

    sem_destroy(&emptySlots); sem_destroy(&fullSlots);
    pthread_mutex_destroy(&mutex);
    return 0;
}

/* prodcons.c
   Producer-Consumer using pthreads and semaphores
   Compile: gcc prodcons.c -pthread -o prodcons
*/
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5
int buffer[BUFFER_SIZE];
int in = 0, out = 0;

sem_t empty, full;
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

void *producer(void *arg){
    int id = *(int*)arg;
    for(int i=0;i<10;i++){
        sem_wait(&empty);
        pthread_mutex_lock(&mutex);
        buffer[in] = i + id*100;
        printf("Producer %d produced %d at %d\n", id, buffer[in], in);
        in = (in+1)%BUFFER_SIZE;
        pthread_mutex_unlock(&mutex);
        sem_post(&full);
        usleep(100000);
    }
    return NULL;
}

void *consumer(void *arg){
    int id = *(int*)arg;
    for(int i=0;i<10;i++){
        sem_wait(&full);
        pthread_mutex_lock(&mutex);
        int val = buffer[out];
        printf("Consumer %d consumed %d at %d\n", id, val, out);
        out = (out+1)%BUFFER_SIZE;
        pthread_mutex_unlock(&mutex);
        sem_post(&empty);
        usleep(150000);
    }
    return NULL;
}

int main(){
    sem_init(&empty,0,BUFFER_SIZE);
    sem_init(&full,0,0);

    pthread_t p1,p2,c1,c2;
    int a=1,b=2,c=1,d=2;
    pthread_create(&p1,NULL,producer,&a);
    pthread_create(&p2,NULL,producer,&b);
    pthread_create(&c1,NULL,consumer,&c);
    pthread_create(&c2,NULL,consumer,&d);

    pthread_join(p1,NULL);
    pthread_join(p2,NULL);
    pthread_join(c1,NULL);
    pthread_join(c2,NULL);

    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);
    return 0;
}

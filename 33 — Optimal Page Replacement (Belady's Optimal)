/* optimal_paging.c
   Simulate optimal page replacement (lookahead).
   Compile: gcc optimal_paging.c -o optimal_paging
*/
#include <stdio.h>
#include <limits.h>

int findNextUse(int ref[], int n, int start, int page){
    for(int i=start;i<n;i++) if(ref[i]==page) return i;
    return INT_MAX; // not used again
}

int main(){
    int frames, n;
    int ref[1000];
    printf("Number of frames: "); scanf("%d",&frames);
    printf("Number of references: "); scanf("%d",&n);
    printf("Enter reference string:\n");
    for(int i=0;i<n;i++) scanf("%d",&ref[i]);

    int frame[frames];
    for(int i=0;i<frames;i++) frame[i] = -1;
    int faults = 0;

    for(int i=0;i<n;i++){
        int page = ref[i];
        int found = 0;
        for(int j=0;j<frames;j++) if(frame[j]==page) { found = 1; break; }
        if(!found){
            // empty slot?
            int slot = -1;
            for(int j=0;j<frames;j++) if(frame[j]==-1) { slot = j; break; }
            if(slot == -1){
                // choose page with farthest next use
                int farthest = -1, farIdx = -1;
                for(int j=0;j<frames;j++){
                    int next = findNextUse(ref, n, i+1, frame[j]);
                    if(next > farthest){ farthest = next; farIdx = j; }
                }
                slot = farIdx;
            }
            frame[slot] = page; faults++;
        }
        printf("Ref %d -> ", page);
        for(int j=0;j<frames;j++) printf("%2d ", frame[j]);
        printf("\n");
    }
    printf("Total page faults = %d\n", faults);
    return 0;
}
